Note: git clone Download repo and see its revision history.
[amitadmin@NAT8 YouCompleteMe]$ git rev-list --all --remotes --pretty
-------------------------------------------------------------------

Step1: Note also install this first:
[root@NAT8 ~]# python3 -m pip install rope
[root@NAT8 ~]# python3 -m pip install ropevim
[amitadmin@NAT8 ~]$ mv .vim .vim.old
[amitadmin@NAT8 ~]$ unlink .vimrc
[amitadmin@NAT8 ~]$ mkdir .vim
[amitadmin@NAT8 ~]$ touch .vim/vimrc
[amitadmin@NAT8 ~]$ ln -s .vim/vimrc .vimrc


Step2:
Install Vundle.
[amitadmin@NAT8 ~]$ git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
Cloning into '/home/amitadmin/.vim/bundle/Vundle.vim'...
remote: Enumerating objects: 3140, done.
remote: Total 3140 (delta 0), reused 0 (delta 0), pack-reused 3140
Receiving objects: 100% (3140/3140), 935.40 KiB | 8.06 MiB/s, done.
Resolving deltas: 100% (1106/1106), done.


Step3:
[amitadmin@NAT8 ~]$ vi .vimrc
set nocompatible              " be iMproved, required
filetype off                  " required
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')
" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
Plugin 'tpope/vim-fugitive'
"Tried to fetch old version of YouCompleteMe. But checkout next step4 and 5.
Plugin 'Valloric/YouCompleteMe', { 'commit':'d98f896' } 
Plugin 'scrooloose/nerdtree'
Plugin 'jistr/vim-nerdtree-tabs'
Plugin 'kien/ctrlp.vim'
Plugin 'jtratner/vim-flavored-markdown'
Plugin 'suan/vim-instant-markdown'
Plugin 'nelstrom/vim-markdown-preview'
"python sytax checker
Plugin 'nvie/vim-flake8'
Plugin 'vim-scripts/Pydiction'
Plugin 'vim-scripts/indentpython.vim'
Plugin 'scrooloose/syntastic'
"html
"  isnowfy only compatible with python not python3
"Plugin 'isnowfy/python-vim-instant-markdown'
"Plugin 'klen/rope-vim'
Plugin 'python-rope/ropevim.git'
Plugin 'davidhalter/jedi-vim'
Plugin 'ervandew/supertab'
""code folding
Plugin 'tmhedberg/SimpylFold'
"Colors!!!
Plugin 'altercation/vim-colors-solarized'
Plugin 'jnurmine/Zenburn'
"Gstatus bar
Plugin 'Lokaltog/powerline', {'rtp': 'powerline/bindings/vim/'}
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
"" yml plugins
Plugin 'Yggdroot/indentLine'
Plugin 'digitalrounin/vim-yaml-folds'
Plugin 'dense-analysis/ale'
Plugin 'adrienverge/yamllint'
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
set nu
filetype plugin indent on   " enables filetype detection
let g:SimpylFold_docstring_preview = 1
"autocomplete
let g:ycm_autoclose_preview_window_after_completion=1
"custom keys
let mapleader=" "
map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>
" using vim-colors-solarized
call togglebg#map("<F5>")
if has('gui_running')
  set background=dark
  colorscheme solarized
  let g:solarized_termcolors=256
  set guifont=Monaco:h14
else
  colorscheme zenburn
endif
"
let NERDTreeIgnore=['\.pyc$', '\~$'] "ignore files in NERDTree
""I don't like swap files
set noswapfile
""python with virtualenv support
python3 << EOF
import os.path
import sys
import vim
if 'VIRTUA_ENV' in os.environ:
  project_base_dir = os.environ['VIRTUAL_ENV']
  sys.path.insert(0, project_base_dir)
  activate_this = os.path.join(project_base_dir,'bin/activate_this.py')
  execfile(activate_this, dict(__file__=activate_this))
EOF
""it would be nice to set tag files by the active virtualenv here
"":set tags=~/mytags "tags for ctags and taglist
""omnicomplete
autocmd FileType python set omnifunc=pythoncomplete#Complete
""------------Start Python PEP 8 stuff----------------
"" Number of spaces that a pre-existing tab is equal to.
au BufRead,BufNewFile *py,*pyw,*.c,*.h set tabstop=4
""spaces for indents
au BufRead,BufNewFile *.py,*pyw set shiftwidth=4
au BufRead,BufNewFile *.py,*.pyw set expandtab
au BufRead,BufNewFile *.py set softtabstop=4
"" Use the below highlight group when displaying bad whitespace is desired.
highlight BadWhitespace ctermbg=red guibg=red
"" Display tabs at the beginning of a line in Python mode as bad.
au BufRead,BufNewFile *.py,*.pyw match BadWhitespace /^\t\+/
"" Make trailing whitespace be flagged as bad.
au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/
"" Wrap text after a certain number of characters
au BufRead,BufNewFile *.py,*.pyw, set textwidth=100
"" Use UNIX (\n) line endings.
au BufNewFile *.py,*.pyw,*.c,*.h set fileformat=unix
"" Set the default file encoding to UTF-8:
set encoding=utf-8
"" For full syntax highlighting:
let python_highlight_all=1
syntax on
"" Keep indentation level from previous line:
autocmd FileType python set autoindent
"" make backspaces more powerfull
set backspace=indent,eol,start
""Folding based on indentation:
autocmd FileType python set foldmethod=indent
""use space to open folds
nnoremap <space> za
""----------Stop python PEP 8 stuff--------------
"js stuff"
autocmd FileType javascript setlocal shiftwidth=2 tabstop=2
" Splitting file : example in vi editor :sp. to find files.
set splitbelow
set splitright
"split navigations
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = '@'
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline_theme='simple'
set clipboard=unnamed
" yml settings
autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab
"za: Toggle current fold
"zR: Expand all folds
"zi     switch folding on or off
"zc     close current fold
"zM     close all folds
"zv     expand folds to reveal cursor
"zj     move down to top of next fold
"zk     move up to bottom of previous fold
set foldlevelstart=20
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
let g:ale_sign_error = '✘'
let g:ale_sign_warning = '⚠'
let g:ale_lint_on_text_changed = 'never'
let g:yaml_limit_spell=1



Step4: NOTE Got error when opening file with vi editor as YouCompleteMe is not working with my version if vim.
As per git it support 8.1 or above.
[amitadmin@NAT8 ~]$ vim --version
VIM - Vi IMproved 8.0 (2016 Sep 12, compiled Jun 18 2020 15:49:08)
Included patches: 1-1763
Modified by <bugzilla@redhat.com>
Compiled by <bugzilla@redhat.com>
Huge version without GUI.  Features included (+) or not (-):
+acl               +farsi             +mouse_sgr         -tag_any_white
+arabic            +file_in_path      -mouse_sysmouse    -tcl
+autocmd           +find_in_path      +mouse_urxvt       +termguicolors
-autoservername    +float             +mouse_xterm       +terminal
-balloon_eval      +folding           +multi_byte        +terminfo
+balloon_eval_term -footer            +multi_lang        +termresponse
-browse            +fork()            -mzscheme          +textobjects
++builtin_terms    +gettext           +netbeans_intg     +timers
+byte_offset       -hangul_input      +num64             +title
+channel           +iconv             +packages          -toolbar
+cindent           +insert_expand     +path_extra        +user_commands
-clientserver      +job               +perl/dyn          +vertsplit
-clipboard         +jumplist          +persistent_undo   +virtualedit
+cmdline_compl     +keymap            +postscript        +visual
+cmdline_hist      +lambda            +printer           +visualextra
+cmdline_info      +langmap           +profile           +viminfo
+comments          +libcall           +python/dyn        +vreplace
+conceal           +linebreak         +python3/dyn       +wildignore
+cryptv            +lispindent        +quickfix          +wildmenu
+cscope            +listcmds          +reltime           +windows
+cursorbind        +localmap          +rightleft         +writebackup
+cursorshape       +lua/dyn           +ruby/dyn          -X11
+dialog_con        +menu              +scrollbind        -xfontset
+diff              +mksession         +signs             -xim
+digraphs          +modify_fname      +smartindent       -xpm
-dnd               +mouse             +startuptime       -xsmp
-ebcdic            -mouseshape        +statusline        -xterm_clipboard
+emacs_tags        +mouse_dec         -sun_workshop      -xterm_save
+eval              +mouse_gpm         +syntax
+ex_extra          -mouse_jsbterm     +tag_binary
+extra_search      +mouse_netterm     +tag_old_static
   system vimrc file: "/etc/vimrc"
     user vimrc file: "$HOME/.vimrc"
 2nd user vimrc file: "~/.vim/vimrc"
      user exrc file: "$HOME/.exrc"
       defaults file: "$VIMRUNTIME/defaults.vim"
  fall-back for $VIM: "/etc"
 f-b for $VIMRUNTIME: "/usr/share/vim/vim80"
Compilation: gcc -c -I. -Iproto -DHAVE_CONFIG_H     -O2 -g -pipe -Wall -Werror=format-security -Wp,-D_GLIBCXX_ASSERTIONS -fexceptions -fstack-protector-strong -grecord-gcc-switches -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -specs=/usr/lib/rpm/redhat/redhat-annobin-cc1 -m64 -mtune=generic -fasynchronous-unwind-tables -fstack-clash-protection -fcf-protection -D_GNU_SOURCE -D_FILE_OFFSET_BITS=64 -I/usr/include/python3.6m -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1
Linking: gcc   -L. -Wl,-z,relro  -Wl,-z,now -specs=/usr/lib/rpm/redhat/redhat-hardened-ld -fstack-protector-strong -rdynamic -Wl,-export-dynamic -Wl,--enable-new-dtags -Wl,-z,relro -Wl,-z,now -specs=/usr/lib/rpm/redhat/redhat-hardened-ld  -Wl,-z,relro  -Wl,-z,now -specs=/usr/lib/rpm/redhat/redhat-hardened-ld -L/usr/local/lib -Wl,--as-needed -o vim        -lm  -lselinux   -lncurses -lacl -lattr -lgpm -ldl   -Wl,--enable-new-dtags -Wl,-z,relro -Wl,-z,now -specs=/usr/lib/rpm/redhat/redhat-hardened-ld -Wl,-z,relro -Wl,-z,now -specs=/usr/lib/rpm/redhat/redhat-hardened-ld -fstack-protector-strong -L/usr/local/lib  -L/usr/lib64/perl5/CORE -lperl -lpthread -lresolv -ldl -lm -lcrypt -lutil -lc
[amitadmin@NAT8 ~]$




Step5:
[amitadmin@NAT8 YouCompleteMe]$ pwd
/home/amitadmin/.vim/bundle/YouCompleteMe
[amitadmin@NAT8 YouCompleteMe]$ git checkout d98f896 --> i used old version of repo. 
remove .git and run git add * and git commit -m "first"
[amitadmin@NAT8 YouCompleteMe]$ python3 install.py
#vim +PluginInstall +qall
#vim +PluginList--> will show you all plugin with YouCompleteMe.
EXAMPLE :-
https://raw.githubusercontent.com/j1z0/vim-config/master/vimrc
https://realpython.com/vim-and-python-a-match-made-in-heaven/

